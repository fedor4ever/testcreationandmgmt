/*
* Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  
*
*/




package com.symbian.driver.report.views;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.part.ViewPart;

import com.symbian.driver.report.ExceptionReport;
import com.symbian.driver.report.GenericReport;
import com.symbian.driver.report.Report;
import com.symbian.driver.report.ReportInfo;
import com.symbian.driver.report.TefReport;
import com.symbian.driver.report.provider.ReportItemProviderAdapterFactory;

/**
 * TestViewer defines a TestDriver test results view. The view is made of three
 * components: - A Table Viewer which shows the the tasks executed by the
 * Visitor (PCVistor/SymbianVisitor) - A Browser which shows the html file
 * generated by TestDriver while it's in progress and for each TEF Task it shows
 * it's own html result at the end of the task - A exception compoments which
 * shows the exceptions for each task.
 * 
 */

public class TestViewer extends ViewPart {

	/** Const for <code>ID</code> */
	public static final String ID = "com.symbian.driver.edit.views.TestViewer";

	/** Generic logger. */
	protected static Logger LOGGER = Logger.getLogger(TestViewer.class
			.getName());

	/** a viewer Content Provider */
	private ReportAdapterFactoryContentProvider contentProvider;

	/** a viewer Label Provider */
	private ReportAdapterFactoryLabelProvider labelProvider;

	/** the viewer */
	private TableViewer viewer;

	/** a SWT ShashForm */
	private SashForm sashForm;

	/** a SWT Browser widget */
	private Browser iBrowser;

	/** a SWT Text widget for exceptions */
	private Text iException;

	private static final String iLineBreak = "\n**************************\n";

	/** and empty html log document to use when the task does not have one */
	private String iNoHtmlLog = "<HTML><HEAD><TITLE></TITLE></HEAD><BODY></BODY></HTML>";

	private String iFileDoesNotExist = "<HTML><HEAD><TITLE></TITLE></HEAD><BODY><BIG><FONT COLOR=\"red\">File ";

	private String iFileDoesNotExist2 = " : does not exist.</FONT></BIG></BODY></HTML>";

	/** iReport : a reference to the model loaded */
	Report iReport;
	
	private static TestViewer iInstance;

	/**
	 * The constructor.
	 */
	public TestViewer() {
		super();
		iInstance = this;
	}
	
	public static TestViewer getInstance() {
		if (iInstance == null) {
			iInstance = new TestViewer();
		}
		return iInstance;
	}

	/**
	 * This is a callback that will allow us to create the viewer and initialize
	 * it.
	 */
	public void createPartControl(Composite parent) {

		GridLayout gridLayout = new GridLayout();
		gridLayout.marginWidth = 0;
		gridLayout.marginHeight = 0;
		parent.setLayout(gridLayout);

		// create a ShashForm
		this.sashForm = new SashForm(parent, SWT.VERTICAL);
		this.sashForm.setLayout(new GridLayout(2, false));

		// create a table viewer
		createTableViewer(this.sashForm);

		// create a report form to go with the table viewer
		createReportForm(this.sashForm);

		this.sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));

		// layout the text field below the tree viewer
		GridData layoutData = new GridData();
		layoutData.grabExcessHorizontalSpace = true;
		layoutData.grabExcessVerticalSpace = true;
		layoutData.horizontalAlignment = GridData.FILL;
		layoutData.verticalAlignment = GridData.FILL;

	}

	/**
	 * createTableViewer : create a table and sets it's content and label
	 * providers
	 * 
	 * @param aSashForm :
	 *            the parent component.
	 */
	private void createTableViewer(SashForm aSashForm) {

		List<AdapterFactoryImpl> factories = new ArrayList<AdapterFactoryImpl>();
		factories.add(new ReportItemProviderAdapterFactory());
		factories.add(new ResourceItemProviderAdapterFactory());
		factories.add(new ReflectiveItemProviderAdapterFactory());

		ComposedAdapterFactory adapterFactory = new ComposedAdapterFactory(
				factories);

		Table table = new Table(aSashForm, SWT.SINGLE | SWT.H_SCROLL
				| SWT.V_SCROLL | SWT.FULL_SELECTION);
		createTable(table);

		// Create the table viewer
		this.viewer = new TableViewer(table);

		// Set the content provider
		this.contentProvider = new ReportAdapterFactoryContentProvider(
				adapterFactory);
		this.viewer.setContentProvider(this.contentProvider);

		// set the label provider
		this.labelProvider = new ReportAdapterFactoryLabelProvider(adapterFactory);
		this.viewer.setLabelProvider(this.labelProvider);

		this.viewer.setUseHashlookup(true);

		GridData layoutData = new GridData();
		this.viewer.getControl().setLayoutData(layoutData);

		// add a selection action listener
		this.viewer.addSelectionChangedListener(new ISelectionChangedListener() {
			public void selectionChanged(SelectionChangedEvent aEvent) {
				if (aEvent.getSelection() instanceof IStructuredSelection) {
					IStructuredSelection lSelection = (IStructuredSelection) aEvent
							.getSelection();

					String lLog = null;
					EList lExceptions;
					// we are interrested in GenericReport, TefReport and
					// ReportInfo
					if (lSelection.getFirstElement() instanceof GenericReport) {
						GenericReport lReport = (GenericReport) lSelection
								.getFirstElement();

						// populate the browser area
						lLog = lReport.getLog();
						updateBrowser(lLog);

						// populate the exceptions area
						lExceptions = lReport.getExecptionReport();
						updateExceptions(lExceptions);

					} else if (lSelection.getFirstElement() instanceof TefReport) {
						TefReport lReport = (TefReport) lSelection
								.getFirstElement();

						// populate the browser area
						lLog = lReport.getLog();
						updateBrowser(lLog);

						// populate the exceptions
						lExceptions = lReport.getExecptionReport();
						updateExceptions(lExceptions);

					} else if (lSelection.getFirstElement() instanceof ReportInfo) {
						File lRoot = getXMLLocationFromModel();
						if (lRoot != null) {
							String lPath = lRoot.getAbsolutePath().replaceAll(
									"\\.xml", "\\.html");
							File lHtmlFile = new File(lPath);
							if (lHtmlFile.exists()) {
								iBrowser.setUrl(lPath);
							} else {
								iBrowser.setText(iFileDoesNotExist
										+ lHtmlFile.toString()
										+ iFileDoesNotExist2);
							}
						} else {
							iBrowser.setText(iNoHtmlLog);
						}
						iException.setText("");
					}
				}
				return;
			}

			private void updateExceptions(EList lExceptions) {
				iException.setText("");
				Iterator lIter = lExceptions.iterator();
				while (lIter.hasNext()) {
					ExceptionReport lEx = (ExceptionReport) lIter.next();
					String lMessage = lEx.getMessage();
					String lExStack = lEx.getStackTrace();
					iException.append(lMessage + "\n" + lExStack + iLineBreak );
				}
			}

			private void updateBrowser(String lLog) {
				if (lLog != null) {
					// this path is relative to the path of the xml file
					File lRoot = getXMLLocationFromModel();
					if (lRoot != null) {
						// an html log file
						File lHtmlFile = new File(lRoot.getParent(), lLog);
						if (lHtmlFile.exists()) {
							iBrowser.setUrl(lHtmlFile.getAbsolutePath());
						} else {
							iBrowser
									.setText(iFileDoesNotExist
											+ lHtmlFile.toString()
											+ iFileDoesNotExist2);
						}
					}
				} else {
					iBrowser.setText(iNoHtmlLog);
				}
				iBrowser.update();
			}
		});
	}

	/**
	 * createReportForm : Create a report Form for the Browser and the
	 * exceptions
	 * 
	 * @param aParent :
	 *            the parent component
	 */
	private void createReportForm(Composite aParent) {
		SashForm reportSashForm = new SashForm(aParent, SWT.HORIZONTAL);

		Composite comp = new Composite(reportSashForm, SWT.CENTER | SWT.BORDER);
		GridLayout compLayout = new GridLayout();
		compLayout.numColumns = 1;
		comp.setLayout(compLayout);

		CLabel label = new CLabel(comp, SWT.NONE);
		label.setText("HTML results:");
		GridData gd = new GridData();
		gd.horizontalSpan = 1;
		label.setLayoutData(gd);

		// create a browser widget
		this.iBrowser = new Browser(comp, SWT.BORDER);

		GridData brLayout = new GridData();
		brLayout.grabExcessHorizontalSpace = true;
		brLayout.grabExcessVerticalSpace = true;
		brLayout.horizontalAlignment = GridData.FILL;
		brLayout.verticalAlignment = GridData.FILL;
		this.iBrowser.setLayoutData(brLayout);

		Composite comp2 = new Composite(reportSashForm, SWT.CENTER | SWT.BORDER);
		GridLayout compLayout2 = new GridLayout();
		compLayout2.numColumns = 1;
		comp2.setLayout(compLayout2);

		CLabel label2 = new CLabel(comp2, SWT.NONE);
		label2.setText("Exceptions:");
		GridData gd2 = new GridData();
		gd2.horizontalSpan = 1;
		label2.setLayoutData(gd2);

		// create non editable Text widget for exceptions
		this.iException = new Text(comp2, SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
		this.iException.setEditable(false);
		GridData brLayout2 = new GridData();
		brLayout2.grabExcessHorizontalSpace = true;
		brLayout2.grabExcessVerticalSpace = true;
		brLayout2.horizontalAlignment = GridData.FILL;
		brLayout2.verticalAlignment = GridData.FILL;
		this.iException.setLayoutData(brLayout2);

	}

	/**
	 * setInput : set the input for the Viewer
	 * 
	 * @param lReport
	 * 
	 */
	public void setInput(Report lReport) {
		this.iReport = lReport;
		this.viewer.setInput(lReport);
		clearView();
		viewer.refresh();
	}
	

	public Report getReport() {
		return iReport;
	}

	/**
	 * clearView : Clears the view components
	 */
	private void clearView() {
		if (this.viewer != null) {
			this.viewer.getTable().clearAll();
		}
		if (this.iException != null) {
			this.iException.setText("");
		}
		if (this.iBrowser != null) {
			this.iBrowser.setText(iNoHtmlLog);
		}
	}

	/**
	 * createTable : creates the table columns
	 * 
	 * @param table
	 */
	private void createTable(Table table) {
		// Set up the table
		table.setLayoutData(new GridData(GridData.FILL_BOTH));

		// Add the column (Task)
		TableColumn lTaskColumn = new TableColumn(table, SWT.NONE);
		lTaskColumn.setText("Task");

		// Add the column (Operation)
		TableColumn lOperationColumn = new TableColumn(table, SWT.NONE);
		lOperationColumn.setText("Operation");

		// Add the column (Duration)
		TableColumn lDurationColumn = new TableColumn(table, SWT.NONE);
		lDurationColumn.setText("Duration");

		// Add the column (Timeout)
		TableColumn lTimeoutColumn = new TableColumn(table, SWT.NONE);
		lTimeoutColumn.setText("Timed Out");

		// Add the column (TEF Result)
		TableColumn lResultColumn = new TableColumn(table, SWT.NONE);
		lResultColumn.setText("Build/TEF Result");

		// Add the column (TEF RunWsProgram)
		TableColumn lTEFRunWsProgColumn = new TableColumn(table, SWT.NONE);
		lTEFRunWsProgColumn.setText("TEF RunWsProgram Result");

		// Pack the columns
		for (int i = 0, n = table.getColumnCount(); i < n; i++) {
			TableColumn lCol = table.getColumn(i);
			lCol.setResizable(true);
			lCol.setWidth(lCol.getText().length());
			lCol.pack();
		}

		// Turn on the header and the lines
		table.setHeaderVisible(true);
		table.setLinesVisible(true);

	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		this.viewer.getControl().setFocus();
	}

	/**
	 * refresh : refreshs the view
	 */
	public void refresh() {
		this.viewer.refresh();
	}

	/**
	 * isCreated: View created on not
	 * 
	 * @return Boolean : truw/false
	 */
	public boolean isCreated() {
		return this.viewer != null;
	}

	public File getXMLLocationFromModel() {
		String lReturn = null;
		if (this.iReport != null && this.iReport.getReportInfo() != null) {
			lReturn = (String) this.iReport.getReportInfo().getInfo().get(
					"ReportXMLLocation");
		}
		return lReturn == null ? null : new File(lReturn);
	}

}