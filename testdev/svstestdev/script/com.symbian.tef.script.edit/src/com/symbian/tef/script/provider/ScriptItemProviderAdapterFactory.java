/*
* Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: 
*
*/


package com.symbian.tef.script.provider;

import com.symbian.tef.script.util.ScriptAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScriptItemProviderAdapterFactory extends ScriptAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ScriptItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.TefModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TefModelItemProvider tefModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.TefModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTefModelAdapter() {
		if (tefModelItemProvider == null) {
			tefModelItemProvider = new TefModelItemProvider(this);
		}

		return tefModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.TestCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCaseItemProvider testCaseItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.TestCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCaseAdapter() {
		if (testCaseItemProvider == null) {
			testCaseItemProvider = new TestCaseItemProvider(this);
		}

		return testCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Prefix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixItemProvider prefixItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Prefix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixAdapter() {
		if (prefixItemProvider == null) {
			prefixItemProvider = new PrefixItemProvider(this);
		}

		return prefixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Repeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatItemProvider repeatItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Repeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatAdapter() {
		if (repeatItemProvider == null) {
			repeatItemProvider = new RepeatItemProvider(this);
		}

		return repeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.TestStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestStepItemProvider testStepItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.TestStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestStepAdapter() {
		if (testStepItemProvider == null) {
			testStepItemProvider = new TestStepItemProvider(this);
		}

		return testStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Print} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrintItemProvider printItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Print}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrintAdapter() {
		if (printItemProvider == null) {
			printItemProvider = new PrintItemProvider(this);
		}

		return printItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.LoadSuite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadSuiteItemProvider loadSuiteItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.LoadSuite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadSuiteAdapter() {
		if (loadSuiteItemProvider == null) {
			loadSuiteItemProvider = new LoadSuiteItemProvider(this);
		}

		return loadSuiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.LoadServer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadServerItemProvider loadServerItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.LoadServer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadServerAdapter() {
		if (loadServerItemProvider == null) {
			loadServerItemProvider = new LoadServerItemProvider(this);
		}

		return loadServerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.RunUtils} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunUtilsItemProvider runUtilsItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.RunUtils}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunUtilsAdapter() {
		if (runUtilsItemProvider == null) {
			runUtilsItemProvider = new RunUtilsItemProvider(this);
		}

		return runUtilsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.RunProgram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunProgramItemProvider runProgramItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.RunProgram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunProgramAdapter() {
		if (runProgramItemProvider == null) {
			runProgramItemProvider = new RunProgramItemProvider(this);
		}

		return runProgramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.RunScript} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunScriptItemProvider runScriptItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.RunScript}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunScriptAdapter() {
		if (runScriptItemProvider == null) {
			runScriptItemProvider = new RunScriptItemProvider(this);
		}

		return runScriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Pause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PauseItemProvider pauseItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Pause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPauseAdapter() {
		if (pauseItemProvider == null) {
			pauseItemProvider = new PauseItemProvider(this);
		}

		return pauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Delay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelayItemProvider delayItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Delay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelayAdapter() {
		if (delayItemProvider == null) {
			delayItemProvider = new DelayItemProvider(this);
		}

		return delayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Consecutive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsecutiveItemProvider consecutiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Consecutive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConsecutiveAdapter() {
		if (consecutiveItemProvider == null) {
			consecutiveItemProvider = new ConsecutiveItemProvider(this);
		}

		return consecutiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Concurrent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcurrentItemProvider concurrentItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Concurrent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcurrentAdapter() {
		if (concurrentItemProvider == null) {
			concurrentItemProvider = new ConcurrentItemProvider(this);
		}

		return concurrentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.SharedData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedDataItemProvider sharedDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.SharedData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedDataAdapter() {
		if (sharedDataItemProvider == null) {
			sharedDataItemProvider = new SharedDataItemProvider(this);
		}

		return sharedDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.TefComment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TefCommentItemProvider tefCommentItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.TefComment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTefCommentAdapter() {
		if (tefCommentItemProvider == null) {
			tefCommentItemProvider = new TefCommentItemProvider(this);
		}

		return tefCommentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.TestBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestBlockItemProvider testBlockItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.TestBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestBlockAdapter() {
		if (testBlockItemProvider == null) {
			testBlockItemProvider = new TestBlockItemProvider(this);
		}

		return testBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.CreateObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateObjectItemProvider createObjectItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.CreateObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateObjectAdapter() {
		if (createObjectItemProvider == null) {
			createObjectItemProvider = new CreateObjectItemProvider(this);
		}

		return createObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.RestoreObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestoreObjectItemProvider restoreObjectItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.RestoreObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestoreObjectAdapter() {
		if (restoreObjectItemProvider == null) {
			restoreObjectItemProvider = new RestoreObjectItemProvider(this);
		}

		return restoreObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Command} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandItemProvider commandItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Command}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandAdapter() {
		if (commandItemProvider == null) {
			commandItemProvider = new CommandItemProvider(this);
		}

		return commandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Store} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreItemProvider storeItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Store}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreAdapter() {
		if (storeItemProvider == null) {
			storeItemProvider = new StoreItemProvider(this);
		}

		return storeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.Outstanding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutstandingItemProvider outstandingItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.Outstanding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutstandingAdapter() {
		if (outstandingItemProvider == null) {
			outstandingItemProvider = new OutstandingItemProvider(this);
		}

		return outstandingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.AsyncDelay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AsyncDelayItemProvider asyncDelayItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.AsyncDelay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAsyncDelayAdapter() {
		if (asyncDelayItemProvider == null) {
			asyncDelayItemProvider = new AsyncDelayItemProvider(this);
		}

		return asyncDelayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.SharedActiveScheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedActiveSchedulerItemProvider sharedActiveSchedulerItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.SharedActiveScheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedActiveSchedulerAdapter() {
		if (sharedActiveSchedulerItemProvider == null) {
			sharedActiveSchedulerItemProvider = new SharedActiveSchedulerItemProvider(this);
		}

		return sharedActiveSchedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.symbian.tef.script.StoreActiveScheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreActiveSchedulerItemProvider storeActiveSchedulerItemProvider;

	/**
	 * This creates an adapter for a {@link com.symbian.tef.script.StoreActiveScheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreActiveSchedulerAdapter() {
		if (storeActiveSchedulerItemProvider == null) {
			storeActiveSchedulerItemProvider = new StoreActiveSchedulerItemProvider(this);
		}

		return storeActiveSchedulerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (tefModelItemProvider != null) tefModelItemProvider.dispose();
		if (testCaseItemProvider != null) testCaseItemProvider.dispose();
		if (prefixItemProvider != null) prefixItemProvider.dispose();
		if (repeatItemProvider != null) repeatItemProvider.dispose();
		if (testStepItemProvider != null) testStepItemProvider.dispose();
		if (printItemProvider != null) printItemProvider.dispose();
		if (loadSuiteItemProvider != null) loadSuiteItemProvider.dispose();
		if (loadServerItemProvider != null) loadServerItemProvider.dispose();
		if (runUtilsItemProvider != null) runUtilsItemProvider.dispose();
		if (runProgramItemProvider != null) runProgramItemProvider.dispose();
		if (runScriptItemProvider != null) runScriptItemProvider.dispose();
		if (pauseItemProvider != null) pauseItemProvider.dispose();
		if (delayItemProvider != null) delayItemProvider.dispose();
		if (consecutiveItemProvider != null) consecutiveItemProvider.dispose();
		if (concurrentItemProvider != null) concurrentItemProvider.dispose();
		if (sharedDataItemProvider != null) sharedDataItemProvider.dispose();
		if (tefCommentItemProvider != null) tefCommentItemProvider.dispose();
		if (testBlockItemProvider != null) testBlockItemProvider.dispose();
		if (createObjectItemProvider != null) createObjectItemProvider.dispose();
		if (restoreObjectItemProvider != null) restoreObjectItemProvider.dispose();
		if (commandItemProvider != null) commandItemProvider.dispose();
		if (storeItemProvider != null) storeItemProvider.dispose();
		if (outstandingItemProvider != null) outstandingItemProvider.dispose();
		if (asyncDelayItemProvider != null) asyncDelayItemProvider.dispose();
		if (sharedActiveSchedulerItemProvider != null) sharedActiveSchedulerItemProvider.dispose();
		if (storeActiveSchedulerItemProvider != null) storeActiveSchedulerItemProvider.dispose();
	}

}
