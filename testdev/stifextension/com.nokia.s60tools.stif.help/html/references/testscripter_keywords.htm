<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>Test Scripter keywords</title>
<link href="../../book.css" type="text/css" rel="stylesheet">
</head>
<body>

<h2>Test Scripter keywords</h2>
<table width="489" border="1" cellspacing="1" cellpadding="2">
<colgroup>
<col width="33*">
<col width="159*"></colgroup>
<tbody>
<tr>
<td><p><b>Keyword</b></p></td>
<td><p><b>Explanation and usage examples</b></p></td>
</tr>
<tr>
<td><code>title</code></td>
<td><p>Describes the test case. This is mandatory for every test case and must be the first keyword. The description is placed after the keyword. </p><code>title Create, print, run example and delete</code></td>
</tr>
<tr>
<td><code>timeout</code></td>
<td><p>Used to give a timeout value for a test case. The timeout value is given in milliseconds. For example, timeout of 10 seconds would be marked as: </p><code>timeout 10000</code></td>
</tr>
<tr>
<td><code>priority</code></td>
<td><p>The priority value of the test case is either an integer or the string (high, normal or low). Negative values are low and positive values are high.</p><p>For example, &ndash;100 is low, 0 is normal, 100 is high, 1000 is very high: </p><code>priority high<br>priority 100<br>priority &ndash;100<br>priority 0</code></td>
</tr>
<tr>
<td><code>print</code></td>
<td><p>Can be used to print, for example, progress information to the UI. The printed description is placed after the print keyword, as in the example in <a href="../concepts/scripts.htm">Test scripts</a>.</p></td>
</tr>
<tr>
<td><code>setresultdescription</code></td>
<td><p>Can be used to set description of currently executed test case. In case of an error situation, it will be shown in the test report.</p><code>setresultdescription object creation starts </code></td>
</tr>
<tr>
<td><code>create</code></td>
<td><p>Used to create a new instance of a test class. This keyword has two mandatory arguments: </p>
<ul>
<li>Test class name	: The test class name for the new object. </li>
<li>Test object name: The name of the created new instance of the test class.</li>
</ul>
<code>create TestScriptClass test</code></td>
</tr>
<tr>
<td><code>createkernel</code></td>
<td><p>Used to create a new instance of a kernel test class. This keyword has two mandatory arguments: </p>
<ul>
<li>Kernel test class name: The kernel test class name for the new object.</li>
<li>Test object name: The name of the created new instance of the kernel test class.</li>
</ul>
<code>createkernel TSKernelTest test</code></td>
</tr>
<tr>
<td><code>delete</code></td>
<td><p>Used to delete an instance of a test class. Keyword has one mandatory argument: </p>
<ul>
<li>Test object name: The name of the instance of the test class that is deleted.</li>
</ul>
<code>delete test</code></td>
</tr>
<tr>
<td><code>allownextresult</code></td>
<td><p>Used to add valid result values for a method and for asynchronous commands. The arguments for this keyword are Symbian OS error codes. </p><p>The default value for the expected result is 0, and if a value is set with allownextresult, 0 is removed from the expected values. </p><p>A method may either return or leave with the specified result. Every method call removes all allowed results. That is, after every method call, the default value 0 is again the only expected result value. Multiple allownextresult keywords can be placed before a method call and before the waittestclass keyword.</p><code>allownextresult &ndash;1 <br>allownextresult &ndash;1 -5 -12</code></td>
</tr>
<tr>
<td><code>allowerrorcodes</code></td>
<td><p>The allowerrorcodes keyword is used to add valid result values for a method and for asynchronous commands. The arguments for this keyword are Symbian OS error codes. </p><p>As a default the expected result is 0 and if new value is set with allowerrorcodes, 0 will remain as an expected value. A method may either return or leave with the specified results. Every method call removes all allowed results. That is, after every method call, the default value 0 is again the only expected result value. </p><p>Multiple allowerrorcodes keywords can be placed before a method call and before the waittestclass keyword.</p><code>allowerrorcodes &ndash;1  <br> allowerrorcodes &ndash;1 -5 -12</code></td>
</tr>
<tr>
<td><code>waittestclass</code></td>
<td><p>Used to pause test case running until the specified test class object calls the Signal function to proceed with the test case execution again. Keyword has one mandatory argument: </p>
<ul>
<li>Test object name: The name of the instance of the test class, which must call Signal() to proceed with the test case execution.</li>
</ul>
<code>waittestclass test </code></td>
</tr>
<tr>
<td><code>pause</code></td>
<td><p>Used to pause test case running for a specified timeout (in milliseconds). That is, no further lines of the test case file will be executed during that delay, but the thread is not halted; any user active objects may still be completed and their RunL() called.</p><p>For example, a pause of 10 seconds would be:</p><code>pause 10000</code></td>
</tr>
<tr>
<td><code>loop</code><br><code>endloop</code></td>
<td><p>Used to repeat a section of the test case file for the specified number of iterations. The section to be repeated is enclosed with the loop and endloop keywords. Nested loops are not supported. Available arguments are:</p>
<ul>
<li>Loop times: The loop count, that is, the number of times that the loop is executed. </li>
<li>msec (optional): This keyword says that &lsquo;Loop times&rsquo; argument stands for the time in milliseconds during which loop will be repeated. </li>
</ul>
<p>For example, to execute a loop for 5 times: </p><code>loop 5 // execute this 5 times <br>print LOOP_COUNTER // prints loop counter value, from 0 to -1. <br>endloop</code></td>
</tr>
<tr>
<td><code>Object name</code></td>
<td><p>The test object name can be considered as a temporary keyword, which is valid between its creation with the create keyword and its deletion with the delete keyword. The object name is used to call methods from a test object. The method name is given as the first argument for the object name, and the method may have arguments, which are forwarded to the test class method.</p><code>TestObjectName MethodName</code><p>&lt;method arguments 1 2 3></p></td>
</tr>
<tr>
<td><code>oomignorefailure</code></td>
<td><p>Used for OOM testing. This keyword defines if a test class&rsquo;s building block execution result is checked or ignored. Possible values are ON or OFF: </p>
<ul>
<li>ON indicates that the building block execution result will be ignored.</li>
<li>OFF (default) indicates that the building block execution result will be checked and errors will be handled.</li>
</ul>
<code>oomignorefailure on</code></td>
</tr>
<tr>
<td><code>oomheapfailnext</code></td>
<td><p>Used for OOM testing. This keyword defines that heap allocation failure occurs in the test thread.</p>
<ul>
<li>Count value (rate): The failure rate. Heap allocation fails every time that is given as an argument. The given argument will be increased by one because the Test Scripter LOOP_COUNTER range starts from 0. The oomheapfailnext range starts from 1.</li>
</ul>
<code>oomheapfailnext 0</code></td>
</tr>
<tr>
<td><code>oomheapsetfail</code></td>
<td><p>Used for OOM testing. This keyword defines that heap allocation failure occurs in the test thread. The user can define the failure type and count (rate).</p><ul>
<li>The type of failure to be simulated, the value are: random, truerandom, deterministic, none and failnext. </li>
<li>Count value (rate): The given argument will be increased by one because the Test Scripter LOOP_COUNTER range starts from 0. The oomheapsetfail range starts from 1.</li>
</ul>
<code>oomheapsetfail deterministic 2</code></td>
</tr>
<tr>
<td><code>oomheaptonormal</code></td>
<td><p>Used for OOM testing. This keyword ends OOM testing and normal testing continues. This keyword can be used to initialize OOM parameters to the default ones. The oomheaptonormal keyword enables the test class&rsquo;s building block execution result check and heap failures are not used anymore.</p></td>
</tr>
<tr>
<td><code>testinterference</code></td>
<td><p>The testinterference keyword is used for test interference testing. It can take the following arguments: </p>
<ul>
<li>Object name</li>
<li>Command (start or stop) </li>
<li>Category</li>
<li>Type</li>
<li>Idle time (in milliseconds) </li>
<li>Active time (in milliseconds) </li>
<li>Set priority</li>
</ul>
<p>Example of usage: </p><code>#idle = 200 microseconds, active = 2<br> microseconds testinterference object1 start activeobject cpuload 0.2 0.002 <br>. . . <br>testinterference object1 stop</code></td>
</tr>
<tr>
<td><code>testmeasurement</code></td>
<td><p>Used for test measurement testing. It can take the following arguments:</p>
<ul>
<li>Command (start or stop) </li>
<li>Type</li>
<li>parameters</li>
</ul>
<code>testmeasurement start stifmeasurementplugin02 c:\ConfigurationInfo.txt <br>.
. . <br>testmeasurement stop stifmeasurementplugin02</code></td>
</tr>
<tr>
<td><code>callsub</code></td>
<td><p>The callsub command makes TestScripter executing pointed section of script.</p><p>A section that will be called must start with [Sub name] and end with [EndSub] tags, where name is the identifier of the sub. The execution of the sub will continue until its end is reached. There is possibility to call a sub from another sub.</p><code>[Test] <br>title calldemo <br>print Starting... <br>callsub T1 <br>callsub T2 <br>print Finishing... <br>[Endtest]<br><br>[Sub T1] <br>print Inside T1 sub<br>callsub T11 <br>[EndSub]  <br><br>[Sub T11] print Inside T11 sub <br>[EndSub]  <br><br>[Sub T2] <br>print Inside T2 sub <br>[EndSub]</code></td>
</tr>
<tr>
<td><code>request</code></td>
<td><p>Used to request an event. If someone wants to use an event, it must first be requested, and after that it can be waited. After the event is not used anymore, it must be released. The event name is a mandatory parameter.</p><code>request Event1</code></td>
</tr>
<tr>
<td><code>wait</code></td>
<td><p>Used to wait for an event. A request must be called before wait, and wait blocks until the requested event is set. wait may proceed immediately if the requested event is a state event and already pending (for example, a phone call is already active). wait has one mandatory argument, which is the event name. </p><code>wait Event1</code></td>
</tr>
<tr>
<td><code>release</code></td>
<td><p>Used to release an event. Every requested event must be released explicitly when it is not used anymore. release has one mandatory argument, which is the event name. </p><code>release Event1</code></td>
</tr>
<tr>
<td><code>set</code></td>
<td><p>Used to set an event. Every set state event must be explicitly unset. The arguments are: </p>
<ul>
<li>Event: The event name. </li>
<li>State (Optional): If a state is given, sets the state event, otherwise sets an indication event. A state event remains set until it is unset explicitly with the unset keyword. An indication event is set only once to every requester and implicitly unset after that.</li>
</ul>
<p>For example: </p><code>set Event1 <br>set Event2 state</code></td>
</tr>
<tr>
<td><code>unset</code></td>
<td><p>Used to unset a state event. Every set state event must be unset. Indication events cannot be unset. unset blocks until everyone who has requested the specified event has released the event. The mandatory argument is the event name. </p><code>unset Event1</code></td>
</tr>
<tr>
<td><code>bringtoforeground</code></td>
<td><p>The bringtoforeground keyword is used to bring UI component container to foreground. </p></td>
</tr>
<tr>
<td><code>sendtobackground</code></td>
<td><p>The sendtobackground keyword is used to send UI component container to background. </p></td>
</tr>
<tr>
<td><code>presskey</code></td>
<td><p>The presskey keyword is used to send key event to tested UI component. It has one mandatory parameter, which is the key code	 (a single character or constant defined in TKeyCode enumeration). </p><p>Also other, optional parameters can be used. </p><code>presskey a <br>presskey 1 <br>presskey EKeyDownArrow <br>presskey keycode=123 <br>presskey keycode=EKeyDownArrow <br>presskey x modifier=EModifierShift <br>presskey keyscancode=123 <br>presskey EKeyDevice0 // press left softkey<br> presskey local EKeyDevice0 // press left softkey <br>presskey global EKeyDevice0 // press left softkey </code></td>
</tr>
<tr>
<td><code>typetext</code></td>
<td><p>The typetext keyword is used to send text to tested UI component. The text that should be sent to the UI components must be in quotation marks.</p><code>typetext &ldquo;Text to send&rdquo;</code></td>
</tr>
</tbody>
</table>

<div id="footer">Copyright &copy; 2009 Nokia Corporation and/or its subsidiary(-ies). All rights reserved. 
License: <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.</div>
</body>
</html>