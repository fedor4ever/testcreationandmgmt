<?xml version="1.0"?>

<sections>

<section name="Test" endname="Endtest">

<command id="title">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			string 
		</argument>
	</mandatory>
	<optional>
		<argument type="normal" value="words" binding="none" nextvalue="none">
			value 
		</argument>
	</optional>
	<errornote>
	Title commmand requires test title as an argument	
	</errornote>
	<commandinfo>
The title keyword is used to give a verbal description for a test case.
	</commandinfo>
</command>

<command id="timeout">
	<mandatory>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			value 
		</argument >
	</mandatory>
	<errornote>
	Timeout keyword should have a timeout value as an argument
	</errornote> 
	<commandinfo>
Timeout is used to give a timeout value for a test case.
Timeout value is passed in milliseconds.
	</commandinfo>
	
</command>

<command id="priority">
	<mandatory>
		<argument type="selective" value="none" binding="none" nextvalue="none">
			<argument type="normal" value="name" binding="none" nextvalue="none">
				normal
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				high
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				low
			</argument>
			<argument type="normal" value="digit" binding="none" nextvalue="none">
				Priority value
			</argument>
 		</argument>
	</mandatory>
	<errornote>
	Priority keyword should have a priority value as an argument
	</errornote> 
	<commandinfo>
Priority is used to give a priority for a test case.
Priority value either as an integer or as the string high, normal or low.
	</commandinfo>
</command>

<command id="setresultdescription">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			setresultdescriptionValue 
		</argument >
	</mandatory>
	<errornote>
	Setresultdescription has invalid argument
	</errornote> 
	<commandinfo>
Setresultdescription can be used to set description of currently executed test case. 
In case of error situation, it will be shown to user in test report.
	</commandinfo>
</command>

<command id="create">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			TestClassName
		</argument >
		<argument type="creative" value="literal" binding="none" nextvalue="none">
			TestObjectName 
		</argument >
	</mandatory>
	<errornote>
	Create has invalid argument
	</errornote> 
	<commandinfo>
Create keyword is used to create a new instance of a test class.

Arguments:
Test class name:	The test class name for the new object.
Test object name:	The name of the created new instance of the test class.
	</commandinfo>
</command>

<command id="createx">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			TestClassName
		</argument >
		<argument type="creative" value="literal" binding="none" nextvalue="none">
			TestObjectName 
		</argument >
	</mandatory>
	<errornote>
	Create has invalid argument
	</errornote> 
	<commandinfo>
Createx keyword is used to create a new instance of a test class.

Arguments:
Test class name:	The test class name for the new object.
Test object name:	The name of the created new instance of the test class.
	</commandinfo>
</command>


<command id="createkernel">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			KernelTestClassName
		</argument >
		<argument type="creative" value="literal" binding="none" nextvalue="none">
			TestObjectName 
		</argument >
	</mandatory>
	<errornote>
	Createkernel has invalid argument
	</errornote> 
	<commandinfo>
Createkernel keyword is used to create a new instance of a kernel test class.

Arguments:
Test class name:	The test class name for the new object.
Test object name:	The name of the created new instance of the test class.
	</commandinfo>
</command>

<command id="delete">
	<mandatory>
		<argument type="normal" value="objectdelete" binding="none" nextvalue="none">
			TestObjectName
		</argument >
	</mandatory>
	<errornote>
	Delete has invalid argument
	</errornote> 
	<commandinfo>
Delete is used to delete an instance of a test class

Arguments:
Test class name:	The name of the instance of the test class that is deleted.
	</commandinfo>
</command>

<command id="allownextresult">
	<mandatory>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			errorCode 
		</argument>
	</mandatory>
	<optional>
		<argument type="normal" value="words" binding="none" nextvalue="digit">
			optionalErrorCode 
		</argument>
	</optional>
	<errornote>
	"allownextresult" keyword must be followed by an error code
	</errornote>
	<commandinfo>
Allownextresult is used to add valid result values for a method and for asynchronous commands.
The default value for the expected result is 0

Arguments:
A Symbian OS error codes:	A Symbian OS error codes, which is allowed from the next method or waittestclass completion. 
Multiple error codes, separated by space, can be passed.
	</commandinfo> 
</command>

<command id="allowerrorcodes">
	<mandatory>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			errorCode 
		</argument>
	</mandatory>
	<optional>
		<argument type="normal" value="words" binding="none" nextvalue="digit">
			optionalErrorCode 
		</argument>
	</optional>
	<errornote>
	"allowerrorcodes" keyword must be followed by an error code
	</errornote>
	<commandinfo>
Allowerrorcodes is used to add valid result values for a method and for asynchronous commands.
The default value for the expected result is 0

Arguments:
A Symbian OS error codes:	A Symbian OS error codes, which is allowed from the next method or waittestclass completion. 
Multiple error codes, separated by space, can be passed.
	</commandinfo>
</command>


<command id="waittestclass">
	<mandatory>
		<argument type="normal" value="object" binding="none" nextvalue="none">
			TestObjectName
		</argument >
	</mandatory>
	<errornote>
	Delete has invalid argument
	</errornote> 
	<commandinfo>
Waittestclass is used to pause test case running until the specified test class object calls the 
Signal function to proceed with the test case execution again. 

Arguments:
Test object name:	The name of the instance of the test class, 
which must call Signal() to proceed with the test case execution.
	</commandinfo>	
</command>

<command id="pause">
	<mandatory>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			pauseValue 
		</argument >
	</mandatory>
	<errornote>
	"pause" keyword takes number of miliseconds as an argument"
	</errornote> 
		<commandinfo>
Pause keyword is used to pause test case running.

Arguments:
Timeou:	The timeout for the pause, specified in milliseconds.
	</commandinfo>
</command>

<command id="loop">
	<mandatory>
			<argument type="normal" value="digit" binding="none" nextvalue="none">
				loopTimes
			</argument>
	</mandatory>
		<optional>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				msec
			</argument>
	</optional>
	<errornote>
	"loop" keyword must be followed by the loop count
	</errornote> 
	<commandinfo>
Loop keyword is used to repeat a section of the test case file for the specified number of iterations. 
The section to be repeated is enclosed with the loop and endloop keywords. 

Arguments:
Loop times:	The loop count, that is, the number of times that the loop is executed.
Msec: This keyword says that ‘Loop times’ argument stands for the time in milliseconds during which loop will be looped
	</commandinfo>
</command>

<command id="print">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			String
		</argument >
	</mandatory>
	<optional>
			<argument type="normal" value="words" binding="none" nextvalue="none">
				yes
			</argument>
	</optional>
	<errornote>
	incorrect "print" value
	</errornote>
	<commandinfo>
Print can be used to print, for example, progress information to the UI.
	</commandinfo> 
</command>

<command id="endloop">
	<errornote>
	"endloop" keyword takes no arguments	
	</errornote> 
		<commandinfo>
The endloop keyword is used to specify the end of a looped section.
	</commandinfo> 
</command>


<command id="oomignorefailure">
	<mandatory>
		<argument type="selective" value="none" binding="none" nextvalue="none">
			<argument type="normal" value="name" binding="none" nextvalue="none">
				on
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				off
			</argument>			
		</argument>
	</mandatory>
	<errornote>
	"oomignorefailure" keyword must be followed by an on/off value
	</errornote> 
	<commandinfo>
Oomignorefailure keyword is used for OOM testing. 
This keyword defines if a test class’s building block execution result is checked or ignored.

Arguments:
Indication for the result check: The possible values are on and off:
on indicates that the building block execution result will be ignored.
off (default) indicates that the building block execution result will be checked and errors will be handled.
	</commandinfo>
</command>

<command id="oomheapfailnext">
	<mandatory>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			CountValue
		</argument >
	</mandatory>
	<errornote>
	"oomheapfailnext" keyword must be followed by a failure rate
	</errornote> 
	<commandinfo>
The oomheapfailnext keyword is used for OOM testing. 
This keyword defines that heap allocation failure occurs in the test thread.

Arguments:
Count value (rate): The failure rate. Heap allocation fails every time that is given as an argument. 
The given argument will be increased by one because the Test Scripter LOOP_COUNTER range starts from 0. 
The oomheapfailnext range starts from 1.
	</commandinfo>
</command>


<command id="oomheapsetfail">
	<mandatory>
		<argument type="selective" value="none" binding="none" nextvalue="none">	
			<argument type="normal" value="name" binding="none" nextvalue="none">
				random
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				truerandom
			</argument>	
			<argument type="normal" value="name" binding="none" nextvalue="none">
				deterministic
			</argument>	
			<argument type="normal" value="name" binding="none" nextvalue="none">
				none
			</argument>	
			<argument type="normal" value="name" binding="none" nextvalue="none">
				failnext
			</argument>			
		</argument>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			CountValue
		</argument >
	</mandatory>
	<errornote>
	"oomheapsetfail" keyword must be followed by the type of failure and a count value
	</errornote>
		<commandinfo>
Oomheapsetfail is used for OOM testing. 
This keyword defines that heap allocation failure occurs in the test thread. 
The user can define the failure type and count (rate).

Arguments:
The type of failure to be simulated:  The supported value are: random, truerandom, deterministic, none, failnext
Count value (rate): The given argument will be increased by one because the Test Scripter LOOP_COUNTER range starts from 0. 
	The oomheapsetfail range starts from 1
	</commandinfo>
	
</command>

<command id="oomheaptonormal">
	<errornote>
	"oomheaptonormal" takes no parameter	
	</errornote> 
	<commandinfo>
The oomheaptonormal keyword is used for OOM testing. 
This keyword ends OOM testing and normal testing continues. 
	</commandinfo>
</command>

<command id="testinterference">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			objectName 
		</argument>
		<argument type="selective" value="none" binding="none" nextvalue="none">	
			<argument type="normal" value="name" binding="none" nextvalue="none">
				start
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				stop
			</argument>			
		</argument>
	</mandatory>
	<optional>
		<argument type="selective" value="none" binding="none" nextvalue="none">
			<argument type="normal" value="name" binding="none" nextvalue="none">
				activeobject
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				thread
			</argument>
		</argument>
		<argument type="selective" value="none" binding="none" nextvalue="none">
			<argument type="normal" value="name" binding="none" nextvalue="none">
				cpuload
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemreadc
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemreadd
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemreade
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemreadz
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemwritec
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemwrited
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemwritee
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemfillandemptyc
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemfillandemptyd
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				filesystemfillandemptye
			</argument>			
		</argument>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			idleTime
		</argument>
		<argument type="normal" value="digit" binding="none" nextvalue="none">
			activeTime
		</argument>
	</optional>
	<errornote>
	syntax error error
	</errornote> 
	<commandinfo>
The testinterference keyword is used for test interference testing

Arguments:
object name: Object name that is used for starting and stopping interference operations.
command: Command for STIF Test Interference control.
The supported values are: 
-start
-stop.

category: Interference category. The supported values are:
-activeobject
-thread.

type: Interference type. 
The supported values are:
-cpuload
-filesystemreadc
-filesystemreadd
-filesystemreade
-filesystemreadz
-filesystemwritec
-filesystemwrited
-filesystemwritee
-filesystemfillandemptyc
-filesystemfillandemptyd
-filesystemfillandemptye

idle time: Idle time in milliseconds. 
active time: Active time in milliseconds.
set priority: Optional. Set priority for thread or active object.
	</commandinfo>
</command>

<command id="measurement">
	<mandatory>
		<argument type="selective" value="none" binding="none" nextvalue="none">
			<argument type="normal" value="name" binding="none" nextvalue="none">
				start
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				stop
			</argument>			
		</argument>
		<argument type="selective" value="none" binding="none" nextvalue="none">
			<argument type="normal" value="name" binding="none" nextvalue="none">
				measurementplugin01
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				measurementplugin02
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				measurementplugin03
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				measurementplugin04
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				measurementplugin05
			</argument>
			<argument type="normal" value="name" binding="none" nextvalue="none">
				stifbappeaprofiler
			</argument>
		</argument>
	</mandatory>
	<optional>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			STIFTestMeasurementParameters
		</argument>

	</optional>
	<errornote>
	"measurement" keyword must be follwed by a command, type and optionaly parameters
	</errornote>
	<commandinfo>
The measurement keyword is used for test measurement testing. 

Arguments:
STIF Test measurement command: Commad for STIF Test Measurement control. The supported values are: start for starting test measurement, stop for stopping test measurement. It also releases all allocated resources.
STIF Test measurement type: Test measurement type.
The supported values are: measurementplugin01, measurementplugin02, measurementplugin03, measurementplugin04, measurementplugin05, bappeaprofiler
STIF Test measurement parameters: Test measurement module configuring etc. user and test measurement module specific. 
	</commandinfo> 
</command>

<command id="var">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			varName
		</argument >
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			varValue 
		</argument >		
	</mandatory>
	<errornote>
	"var" keyword requires variable name and value
	</errornote>
	<commandinfo>
The var command allows assigning some text value to specified variable. It can be then used in other part of the script. 
	</commandinfo>  
</command>


<command id="callsub">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			callsubValue
		</argument >
	</mandatory>
	<errornote>
	"callsub" keyword requires subroutine name as the only agrument
	</errornote>
	<commandinfo>
The callsub command makes TestScripter executing pointed section of script.

Section which will be called must start with [Sub name] and end with [EndSub] tags, where name is the identifier of the sub. 
The execution of the sub will continue until its end is reached. There is possibility to call a sub from another sub.
	</commandinfo>  
</command>

<command id="request">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			requestValue
		</argument >
	</mandatory>
	<errornote>
	"request" keyword must be follwed by an event name
	</errornote>
	<commandinfo>
The request keyword is used to request an event. If someone wants to use an event, it must first be requested, and after that it can be waited.
After the event is not used anymore, it must be released.

Arguments:
Event: The event name.
	</commandinfo> 
</command>

<command id="wait">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			waitValue
		</argument >
	</mandatory>
	<errornote>
	"wait" keyword must be follwed by an event name
	</errornote> 
	<commandinfo>
The wait keyword is used to wait for an event.
A request must be called before wait, and wait blocks until the requested event is set. 
Wait may proceed immediately if the requested event is a state event and already pending (for example, a phone call is already active). 

Arguments:
Event: The event name.
	</commandinfo> 
	
</command>

<command id="release">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			releaseValue
		</argument >
	</mandatory>
	<errornote>
	"release" keyword must be follwed by an event name
	</errornote> 
	<commandinfo>
The release keyword is used to release an event. 
Every requested event must be released explicitly when it is not used anymore.
 
Arguments:
Event: The event name.
	</commandinfo> 
</command>


<command id="set">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			setValue
		</argument >
	</mandatory>
	<optional>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			state
		</argument >
	</optional>
	<errornote>
	"set" keyword must be follwed by an event name
	</errornote>
	<commandinfo>
The set keyword is used to set an event. Every set state event must be explicitly unset.

Arguments:
Event: The event name.
State: Optional. If a state is given, sets the state event, otherwise sets an indication event. 
	</commandinfo>  
</command>

<command id="unset">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			unsetValue
		</argument >
	</mandatory>
	<errornote>
	"unset" keyword must be follwed by an event name
	</errornote> 
	<commandinfo>
The unset keyword is used to unset a state event. 
Every set state event must be unset. 
Indication events cannot be unset. unset blocks until everyone who has requested the specified event has released the event.

Arguments:
Event: The event name. 
	</commandinfo> 
</command>


<command id="bringtoforeground">
	<errornote>
	"bringtoforeground" keyword takes no arguments	
	</errornote>
	<commandinfo>
The bringtoforeground keyword is used to bring UI component container to foreground described in below. 

	</commandinfo> 
</command>

<command id="sendtobackground">
	<errornote>
	"sendtobackground" keyword takes no arguments	
	</errornote>
	<commandinfo>
The sendtobackground keyword is used to send UI component container to background.
	</commandinfo> 
</command>

<command id="presskey">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			presskeyValue 
		</argument>
	</mandatory>
	<optional>
		<argument type="normal" value="words" binding="none" nextvalue="none">
			presskeyValue 
		</argument>
	</optional>
	<errornote>
	"presskey" keyword takes Key code as an argument.	
	</errornote> 
	<commandinfo>	
The presskey keyword is used to send key event to tested UI component. 

Arguments:
Key code	Single character or constant defined in TKeyCode enumeration. Must be defined if keycode and keyscancode is not defined

keycode:	Numeric value or constant defined in TKeyCode enumeration.  If it is defined, then mandatory argument may be omitted
keyscancode:	Numeric key value or constant defined in TStdScanCode enumeration. If it is defined, then mandatory argument or keycode argument may be omitted
modifier:	One of the constant values defined in TEventModifier enumeration
repeats:	Count of auto repeats generated. 0 means an event without repeats. 1 or more means "this many auto repeat events". In most cases this value is ignored  and treated as a single event.
local:	Sends key event to focused UI control, constructed under CCoeEnv delivered by STIF.
global:	Sends key event to focused UI control ( constructed under any CCoeEnv, not necessarily CCoeEnv delivered by STIF ) e.g press left softkey of global message box

	</commandinfo> 
</command>


<command id="typetext">
	<mandatory>
		<argument type="normal" value="quoted" binding="none" nextvalue="none">
			typetextValue 
		</argument>
	</mandatory>
	<errornote>
	"typetext" keyword takes text as an argument.
	</errornote>
	<commandinfo>	
The typetext keyword is used to send text to tested UI component. 

Arguments:
text: Text in quotation marks which should be send to UI component

	</commandinfo>  
</command>


<command id="sendpointerevent">
	<mandatory>
		<argument type="normal" value="literal" binding="none" nextvalue="none">
			sendpointereventValue 
		</argument>
	</mandatory>
	<optional>
		<argument type="normal" value="words" binding="none" nextvalue="none">
			SendpointereventValue 
		</argument>
	</optional>
	<errornote>
	"sendpointerevent" keyword takes Event type and positon as an arguments.
	</errornote> 
	<commandinfo>	
The sendpointerevent keyword is used to send pointer event to tested UI component. 

Arguments:
Event type:	Pointer event type. 
Fallowing pointer even types are sypported: EButton1, EButton2, EButton3, EPointerMove, EPointerSwitchOn, EButton1Down, EButton1Up, EButton2Down, EButton2Up, EButton3Down, EButton3Up
x:	Pointer x co-ordinate
y:	Pointer y co-ordinate

	</commandinfo>  
</command>

</section>

<section name="StifSettings" endname="EndStifSettings">

</section>

<section name="Define" endname="Enddefine">
</section>

<section name="New_Include_Module" endname="End_Include_Module">
</section>


</sections>
